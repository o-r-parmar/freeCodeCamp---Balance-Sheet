html{
    box-sizing: border-box;
}

body{
    font-family: sans-serif;
    color: #0a0a23;
}

span[class~="sr-only"]{
    border: 0 !important;
    clip: rect(1px,1px,1px,1px) !important;    
    clip-path: inset(50%) !important;
    width: 1px !important;
    height: 1px !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    position: absolute !important;
    padding: 0 !important;
    margin: -1px !important;
}

h1{
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
}

h1 .flex{
    display: flex;
    flex-direction: column-reverse; /* this will display the nested elements from bottom to top */
    gap: 1rem;
}

/* The :first-of-type pseudo-selector is used to target the first element that matches the selector */
h1 .flex span:first-of-type{
    font-size: 0.7em;
}

/* The :last-of-type pseudo-selector does the exact opposite - it targets the last element that matches the selector */
h1 .flex span:last-of-type{
    font-size: 1.2em;
}

section{
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
}

#years{
    display: flex;
    justify-content: flex-end;
    position: sticky;
    top: 0;
    color: #FFF;
    background-color: #0a0a23;
    /* The calc() function is a CSS function that allows you to calculate a value based on other values. For example, you can use it to calculate the width of the viewport minus the margin of an element: */
    margin: 0 -2px;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
    z-index: 999;
}

#years span[class] {
    font-weight: bold;
    width: 4.5rem;
    text-align: right;
} /* The span[class] syntax will target any span element that has a class attribute set, regardless of the attribute's value */

.table-wrap{
    padding: 0 0.75rem 1.5rem 0.75rem;
}

span:not(.sr-only){
    font-weight: normal;
} /* The :not() pseudo-selector is used to target all elements that do not match the selector - in this case, any of your span elements that do not have the sr-only class. This ensures that your earlier rules for the span[class~="sr-only"] selector are not overwritten */

table{
    border-collapse: collapse; /* This will allow cell borders to collapse into a single border, instead of a border around each cell. */
    border: 0; /* to hide the borders themselves */
    width: 100%;
    margin-top: 3rem;
    position: relative;
}

table caption{
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    top: -2.25rem; /* shift up by 2.25rem */
    left: 0.5rem; /* shift up by 0.5rem */
}

tbody td{
    width: 100vw; /* vw: This unit stands for 'viewport width'. It's a relative unit based on the width of the viewport, which is essentially the visible area of a web page in a browser. 100vw: This means 100% of the viewport's width. So, when you set an element's width to 100vw, you are making its width equal to 100% of the width of the viewport. */
    min-width: 4rem;
    max-width: 4rem;
}

tbody th{
    width: calc(100% - 12rem);
}

/* The [attribute="value"] selector targets any element that has an attribute with a specific value. */
tr[class="total"]{
    border-bottom: 4px double#0a0a23;
    font-weight: bold;
}

tr[class="total"] th{
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
}

/* he key difference between tr[class="total"] and tr.total is that the first will select tr elements where the only class is total. The second will select tr elements where the class includes total. */
tr.total td{
    text-align: right;
    padding: 0 0.25rem;
}

/* The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type. Use this pseudo-selector to target the third td element within your total table rows. */
tr.total td:nth-of-type(3){
    padding-right: 0.5rem;
}

tr.total :hover{
    background-color: #99c9ff;
}

td.current{
    font-style: italic;
}

tr.data{
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th{
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}

tr.data th .description{
    display: block;
    font-style: italic;
    font-weight: normal;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
}

tr.data td{
    vertical-align: top;
    text-align: right;
    padding: 0.3rem 0.25rem 0;
    padding-right: 0.5rem;
}

tr.data td:last-of-type{
    padding-right: 0.5rem;
}